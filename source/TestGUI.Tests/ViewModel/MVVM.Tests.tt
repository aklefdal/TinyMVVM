<#@ template language="C#v3.5" hostspecific="True"#>
<#@ assembly name="TinyMVVM.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="TinyMVVM.DSL.TextParser" #>
<#@ import namespace="TinyMVVM.SemanticModel" #>
<#
	var parser = new Parser();
	var filePath = Host.ResolvePath(@"..\..\TestGUI\ViewModel\ViewModel.mvvm");
	var modelSpec = parser.Parse(Code.FromFile(filePath));
#>
using System;
using System.Collections.ObjectModel;
using Moq;
using NUnit.Framework;
using TestGUI.ViewModel;
using TinyMVVM.Framework;
using TinyMVVM.Framework.Services;
using TinyMVVM.Framework.Testing;

namespace TestGUI.Tests.ViewModel
{
<#foreach (ViewModel viewModel in modelSpec.ViewModels){#>
	public abstract class <#= viewModel.Name #>Context
	{
		protected <#= viewModel.Name#> viewModel;

		[SetUp]
		public void Setup()
		{
			ServiceLocator.SetLocator(ServiceLocatorForTesting.GetServiceLocator());
			
			Context();
		}
				
		protected abstract void Context();
		
		protected Mock<T> GetFakeFor<T>() where T: class
		{
			return ServiceLocator.Instance.GetInstance<Mock<T>>();
		}
	
		public void Given_<#= viewModel.Name#>_is_created()
		{
			viewModel = new <#= viewModel.Name#>();
		}
		
		public void And_data_is_entered()
		{
		}
		
	<#foreach (var property in viewModel.Properties){#>
	public void And_<#= property.Name#>_is_entered(<#= property.Type#> value)
		{
			viewModel.<#= property.Name#> = value;
		}
	<#}#>	
	
		public void And_<#= viewModel.Name#>_PropertyChangeRecording_is_Started()
		{
			viewModel.PropertyChangeRecorder.Start();
		}

	<#foreach (var property in viewModel.Properties){#>
	public void When_<#= property.Name#>_is_entered(<#= property.Type#> value)
		{
			viewModel.<#= property.Name#> = value;
		}
		
	<#}#>

	
		public void When_<#= viewModel.Name#>_is_spawned()
		{
			viewModel = new <#= viewModel.Name#>();
		} 
		
	<#foreach (var command in viewModel.Commands) {#>
	public void When_execute_<#= command.Name#>_Command()
		{
			viewModel.<#= command.Name#>.Execute(null);
		}
		
	<#}#>
}

<#}#>
}
