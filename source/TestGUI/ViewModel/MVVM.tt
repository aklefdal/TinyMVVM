<#@ template language="C#v3.5" hostspecific="True"#>
<#@ assembly name="TinyMVVM.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="TinyMVVM.DSL.TextParser" #>
<#@ import namespace="TinyMVVM.SemanticModel" #>
<#
	var parser = new Parser();
	var filePath = Host.ResolvePath("ViewModel.mvvm");
	var modelSpec = parser.Parse(Code.FromFile(filePath));
#>
using System;
using TinyMVVM.Framework;

namespace TestGUI.ViewModel
{
<#foreach (ViewModel viewModel in modelSpec.ViewModels) {#>
	public partial class <#= viewModel.Name#> : ViewModelBase
	{
		//State
	<# foreach (ViewModelProperty property in viewModel.Properties) {#>
	<# if (property.IsObservable) {#>private <#= property.Type#> _<#= property.Name#>;
		public <#= property.Type#> <#= property.Name#>
		{
			get { return _<#= property.Name#>; }
			set
			{
				if (value != _<#= property.Name#>)
				{
					_<#= property.Name#> = value;
					TriggerPropertyChanged("<#= property.Name#>");
				}
			}
		}
	<#}#>
<# if (!property.IsObservable) {#>public <#= property.Type#> <#= property.Name#> { get; set; }<#}#>
<#}#>

		
		//Commands
	<#foreach (ViewModelCommand command in viewModel.Commands) {#>
	public DelegateCommand <#= command.Name#> { get; set; }
	<#}#>
	
		public <#= viewModel.Name#>()
		{
	<#foreach (var command in viewModel.Commands) {#>
		<#= command.Name#> = new DelegateCommand(On<#= command.Name#>, Can<#= command.Name#>);
	<#}#>
		
			OnInitialize();
		}
	}
		
<#}#>
}

